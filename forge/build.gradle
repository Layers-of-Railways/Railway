import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.modrinth.minotaur" version "2.+" // https://github.com/modrinth/minotaur
    id 'net.darkhax.curseforgegradle' version '1.0.11' // https://github.com/Darkhax/CurseForgeGradle
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        mixinConfig("railways-common.mixins.json")
        mixinConfig("railways.mixins.json")

        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    // mavens for Forge-exclusives
    maven { url = "https://maven.theillusivec4.top/" } // Curios
    maven { // Create Forge and Registrate Forge
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
        }
    }
    maven {
        url = "https://maven.blamejared.com/"
        content {
            includeGroup("at.petra-k")
            includeGroup("vazkii.patchouli")
        }
    } // JEI, Hex Casting
    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
        content {
            includeGroup("dev.onyxstudios.cardinal-components-api")
        }
    } // Cardinal Components (Hex Casting dependency)
    maven {
        url = "https://jitpack.io"
        content {
            includeGroupByRegex("com.github.*")
        }
    } // Pehkui (Hex Casting dependency)
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes (Hex Casting dependency)
    // Add KFF Maven repository (Hex Casting dependency)
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content {
            includeGroup("thedarkcolour")
        }
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    } // Biomes O' Plenty

    // according to https://github.com/Talia-12/Hexal/blob/main/addon_guide.md, this is needed for hex casting (you should download the mod into here)
    // VERSION USED: hexcasting-forge-1.18.2-0.9.6-pre-6.jar (https://maven.blamejared.com/at/petra-k/hexcasting/hexcasting-forge-1.18.2/0.9.6-pre-6/)
    flatDir {
        dir 'libs'
    }
}

dependencies {
    forge("net.minecraftforge:forge:${minecraft_version}-${forge_version}")
    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Create and its dependencies
    modImplementation("com.simibubi.create:create-${minecraft_version}:${create_forge_version}:slim") { transitive = false }
    modImplementation("com.tterrag.registrate:Registrate:${registrate_forge_version}")
    modImplementation("com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${flywheel_forge_version}")

    // Development QOL
//    modLocalRuntime("mezz.jei:jei-${minecraft_version}-forge:${jei_forge_version}")

    // if you would like to add integration with JEI, uncomment this line.
//    modCompileOnly("mezz.jei:jei-${minecraft_version}:${jei_forge_version}:api")

    // Test with JourneyMap in dev
    modLocalRuntime("maven.modrinth:journeymap:${journeymap_version}-forge")
    modCompileOnly("info.journeymap:journeymap-api:${journeymap_api_version}-SNAPSHOT") // for some reason this is needed explicitly

    // mod compat for tracks
    if (enable_hexcasting.toBoolean()) {
        modLocalRuntime("at.petra-k.paucal:paucal-forge-${minecraft_version}:${paucal_version}")
        modLocalRuntime("railways:hexcasting-forge-${minecraft_version}:${hexcasting_version}") {
            exclude group: "com.github.Virtuoel", module: "Pehkui"
            exclude group: "net.minecraftforge", module: "forge"
            exclude group: "top.theillusivec4.curios", module: "curios-forge"
        }
        //modApi("com.github.Virtuoel:Pehkui:${pehkui_version}-${minecraft_version}-forge") // probably not needed
        modLocalRuntime("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}")
        modLocalRuntime("thedarkcolour:kotlinforforge:${kotlin_for_forge_version}")
    }

    if (enable_byg.toBoolean()) {
        modLocalRuntime("maven.modrinth:biomesyougo:${byg_version_forge}")
    }
    if (enable_byg.toBoolean() || enable_bop.toBoolean()) {
        modLocalRuntime("maven.modrinth:terrablender:${terrablender_version_forge}")
    }
    if (enable_bop.toBoolean()) {
        modLocalRuntime("curse.maven:biomesoplenty-220318:${bop_version}")
    }

    if (enable_sodium_rubidium.toBoolean()) {
        modLocalRuntime("curse.maven:rubidium-574856:${rubidium_version}")
    }

    if (enable_eb.toBoolean())
        modImplementation("com.rabbitminers:extendedbogeys-forge:${EB_verison}+forge-patch-")

    if (enable_sc.toBoolean()) {
        modLocalRuntime("curse.maven:securitycraft-64760:${sc_version}")
    }
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")
    var projectId = "688231"

    def mainFile = upload(projectId, file("build/libs/${archives_base_name}-${mod_version}+forge-mc${minecraft_version}.jar"))
    mainFile.changelog = getChangelogText("Forge", true)
    mainFile.changelogType = "html"
    mainFile.displayName = "Steam 'n Rails ${mod_version} Forge ${minecraft_version}"
    mainFile.addRequirement("create")
    mainFile.addModLoader("Forge")
    mainFile.addJavaVersion("Java 17")
    mainFile.releaseType = "release"
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "ZzjhlDgM"
    changelog = getChangelogText("Forge", true)
    versionName = "Steam 'n Rails ${mod_version} Forge ${minecraft_version}"
    versionNumber = "${mod_version}-forge-${minecraft_version}"
    versionType = "release"
    uploadFile = file("build/libs/${archives_base_name}-${mod_version}+forge-mc${minecraft_version}.jar")
    gameVersions = [minecraft_version]
    loaders = ["forge"]
    dependencies {
        required.version "LNytGWDc", (System.getenv("CREATE_FORGE_VER") != null ? System.getenv("CREATE_FORGE_VER") : "null")
    }
}

processResources {
    // include packs
    from(rootProject.file("common/src/main/resources")) {
        include("resourcepacks/")
    }

    // set up properties for filling into metadata
    Map<String, String> properties = Map.of(
            "version", version,
            "forge_version", forge_version.split("\\.")[0], // only specify major version of forge
            "minecraft_version", minecraft_version,
            "create_version", create_forge_version.split("-")[0] // cut off build number
    )
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("META-INF/mods.toml") {
        expand properties
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
