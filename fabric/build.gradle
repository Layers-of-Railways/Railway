import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.modrinth.minotaur" version "2.+" // https://github.com/modrinth/minotaur
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    Project common = project(":common")
    accessWidenerPath = common.loom.accessWidenerPath

    runs {
        datagen {
            client()

            name "Minecraft Data"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${common.file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=railways"
            vmArg "-Dporting_lib.datagen.existing_resources=${common.file("src/main/resources")}"

            environmentVariable("DATAGEN", "TRUE")
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    // mavens for Fabric-exclusives
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
    maven { url = "https://mvn.devos.one/snapshots/" } // Create Fabric, Porting Lib, Forge Tags, Milk Lib, Registrate Fabric
    maven { url = "https://cursemaven.com" } // Forge Config API Port
    maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
    maven { // forge config api port
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }
    maven {
        url = "https://maven.blamejared.com/"
        content {
            includeGroup("at.petra-k")
            includeGroup("vazkii.patchouli")
        }
    } // JEI, Hex Casting
    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
        content {
            includeGroup("dev.onyxstudios.cardinal-components-api")
        }
    } // Cardinal Components (Hex Casting dependency)
}

configurations.configureEach {
    resolutionStrategy.eachDependency {
        if (requested.module.name == "fabric-loader") {
            useVersion(fabric_loader_version)
        }
    }
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${fabric_loader_version}")
    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive = false }

    // dependencies
    modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")

    // Create - dependencies are added transitively
    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")

    // Fabric ASM (enum extension etc)
    modImplementation("com.github.Chocohead:Fabric-ASM:v2.3") {
        exclude (group: "net.fabricmc.fabric-api")
    }
    include "com.github.Chocohead:Fabric-ASM:v2.3"

    // Development QOL
    modLocalRuntime("maven.modrinth:lazydfu:${lazydfu_version}")
    modLocalRuntime("com.terraformersmc:modmenu:${modmenu_version}")

    // Recipe Viewers - Create Fabric supports JEI, REI, and EMI.
    // See root gradle.properties to choose which to use at runtime.
    switch (fabric_recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "jei": modLocalRuntime("mezz.jei:jei-${minecraft_version}-fabric:${jei_fabric_version}"); break
        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"); break
        case "emi": modLocalRuntime("dev.emi:emi:${emi_version}"); break
        case "disabled": break
        default: println("Unknown recipe viewer specified: ${fabric_recipe_viewer}. Must be JEI, REI, EMI, or disabled.")
    }
    // if you would like to add integration with them, uncomment them here.
//    modCompileOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_fabric_version}")
//    modCompileOnly("mezz.jei:jei-${minecraft_version}-common:${jei_fabric_version}")
//    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_version}")
//    modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rei_version}")
//    modCompileOnly("dev.emi:emi:${emi_version}")

    modLocalRuntime("maven.modrinth:journeymap:${journeymap_version}-fabric") // Test with JourneyMap in dev
    modLocalRuntime("info.journeymap:journeymap-api:${journeymap_api_version}-fabric-SNAPSHOT") // API is a JiJ on fabric, add manually

    modCompileOnly("info.journeymap:journeymap-api:${journeymap_api_version}-fabric-SNAPSHOT") // for some reason this is needed explicitly

    // because create fabric is a bit broken I think
    modApi "net.minecraftforge:forgeconfigapiport-fabric:4.2.9"

    // mod compat for tracks
    if (enable_hexcasting.toBoolean()) {
        modLocalRuntime("at.petra-k.paucal:paucal-fabric-${minecraft_version}:${paucal_version}")
        modLocalRuntime("at.petra-k.hexcasting:hexcasting-fabric-${minecraft_version}:${hexcasting_version}")
        modLocalRuntime("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}-FABRIC")
    }

    if (enable_byg.toBoolean()) {
        modLocalRuntime("maven.modrinth:biomesyougo:${byg_version_fabric}")
        modLocalRuntime("maven.modrinth:terrablender:${terrablender_version_fabric}")
    }

    if (enable_tweakeroo.toBoolean()) {
        modLocalRuntime("curse.maven:tweakeroo-297344:${tweakeroo_version}")
        modLocalRuntime("curse.maven:malilib-303119:${malilib_version}")
    }

    if (enable_sodium_rubidium.toBoolean()) {
        modLocalRuntime("maven.modrinth:sodium:${sodium_version}")
        modLocalRuntime("org.joml:joml:1.10.2")
    }
    if (enable_iris.toBoolean()) {
        modLocalRuntime("maven.modrinth:iris:${iris_version}")
    }

    if (enable_eb.toBoolean()) {
        modImplementation("com.rabbitminers:extendedbogeys-fabric:${EB_verison}+fabric")
    }
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")
    var projectId = "688231"

    def mainFile = upload(projectId, file("build/libs/${archives_base_name}-${mod_version}+fabric-mc${minecraft_version}.jar"))
    mainFile.changelog = getChangelogText("Fabric", true)
    mainFile.changelogType = "html"
    mainFile.displayName = "Steam 'n Rails ${mod_version} Fabric ${minecraft_version}"
    mainFile.addRequirement("create-fabric")
    mainFile.addModLoader("Fabric")
    mainFile.addModLoader("Quilt")
    mainFile.addJavaVersion("Java 17")
    mainFile.releaseType = "release"
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "ZzjhlDgM"
    changelog = getChangelogText("Fabric", true)
    versionName = "Steam 'n Rails ${mod_version} Fabric ${minecraft_version}"
    versionNumber = "${mod_version}-fabric-${minecraft_version}"
    versionType = "release"
    uploadFile = file("build/libs/${archives_base_name}-${mod_version}+fabric-mc${minecraft_version}.jar")
    gameVersions = [minecraft_version]
    loaders = ["fabric", "quilt"]
    dependencies {
        required.version "Xbc0uyRg", (System.getenv("CREATE_FABRIC_VER") != null ? System.getenv("CREATE_FABRIC_VER") : "null")
    }
}

processResources {
    // include packs
    from(rootProject.file("common/src/main/resources")) {
        include("resourcepacks/")
    }

    // set up properties for filling into metadata
    Map<String, String> properties = Map.of(
            "version", version,
            "fabric_loader_version", fabric_loader_version,
            "fabric_api_version", fabric_api_version,
            "minecraft_version", minecraft_version,
            "create_version", create_fabric_version // on fabric, use the entire version, unlike forge
    )
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("fabric.mod.json") {
        expand properties
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    repositories {
        maven {
            name = "IThundxrMaven"
            url = "https://maven.ithundxr.dev/releases"
            credentials(PasswordCredentials) {
                username = findProperty("ithundxr_maven_username") != null ? findProperty("ithundxr_maven_username") : System.getenv("ITHUNDXRMAVENUSERNAME")
                password = findProperty("ithundxr_maven_password") != null ? findProperty("ithundxr_maven_password") : System.getenv("ITHUNDXRMAVENPASSWORD")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    publications {
        mavenFabric(MavenPublication) {
            artifactId = archivesBaseName + "-" + project.name
            from components.java
        }
    }
}
